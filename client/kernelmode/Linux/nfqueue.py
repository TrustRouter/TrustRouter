# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nfqueue', [dirname(__file__)])
        except ImportError:
            import _nfqueue
            return _nfqueue
        if fp is not None:
            try:
                _mod = imp.load_module('_nfqueue', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nfqueue = swig_import_helper()
    del swig_import_helper
else:
    import _nfqueue
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class queue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, queue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, queue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dummy"] = _nfqueue.queue_dummy_set
    __swig_getmethods__["dummy"] = _nfqueue.queue_dummy_get
    if _newclass:dummy = _swig_property(_nfqueue.queue_dummy_get, _nfqueue.queue_dummy_set)
    __swig_setmethods__["_h"] = _nfqueue.queue__h_set
    __swig_getmethods__["_h"] = _nfqueue.queue__h_get
    if _newclass:_h = _swig_property(_nfqueue.queue__h_get, _nfqueue.queue__h_set)
    __swig_setmethods__["_qh"] = _nfqueue.queue__qh_set
    __swig_getmethods__["_qh"] = _nfqueue.queue__qh_get
    if _newclass:_qh = _swig_property(_nfqueue.queue__qh_get, _nfqueue.queue__qh_set)
    __swig_setmethods__["_cb"] = _nfqueue.queue__cb_set
    __swig_getmethods__["_cb"] = _nfqueue.queue__cb_get
    if _newclass:_cb = _swig_property(_nfqueue.queue__cb_get, _nfqueue.queue__cb_set)
    __swig_setmethods__["_mode_set"] = _nfqueue.queue__mode_set_set
    __swig_getmethods__["_mode_set"] = _nfqueue.queue__mode_set_get
    if _newclass:_mode_set = _swig_property(_nfqueue.queue__mode_set_get, _nfqueue.queue__mode_set_set)
    def set_callback(self, *args): return _nfqueue.queue_set_callback(self, *args)
    def open(self): return _nfqueue.queue_open(self)
    def close(self): return _nfqueue.queue_close(self)
    def bind(self, *args): return _nfqueue.queue_bind(self, *args)
    def unbind(self, *args): return _nfqueue.queue_unbind(self, *args)
    def create_queue(self, *args): return _nfqueue.queue_create_queue(self, *args)
    def fast_open(self, *args): return _nfqueue.queue_fast_open(self, *args)
    def set_queue_maxlen(self, *args): return _nfqueue.queue_set_queue_maxlen(self, *args)
    def try_run(self): return _nfqueue.queue_try_run(self)
    def get_fd(self): return _nfqueue.queue_get_fd(self)
    def set_mode(self, *args): return _nfqueue.queue_set_mode(self, *args)
    def process_pending(self, arg0 = 0): return _nfqueue.queue_process_pending(self, arg0)
    def __init__(self): 
        this = _nfqueue.new_queue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nfqueue.delete_queue
    __del__ = lambda self : None;
queue_swigregister = _nfqueue.queue_swigregister
queue_swigregister(queue)

class payload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, payload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, payload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _nfqueue.payload_data_set
    __swig_getmethods__["data"] = _nfqueue.payload_data_get
    if _newclass:data = _swig_property(_nfqueue.payload_data_get, _nfqueue.payload_data_set)
    __swig_setmethods__["len"] = _nfqueue.payload_len_set
    __swig_getmethods__["len"] = _nfqueue.payload_len_get
    if _newclass:len = _swig_property(_nfqueue.payload_len_get, _nfqueue.payload_len_set)
    __swig_setmethods__["id"] = _nfqueue.payload_id_set
    __swig_getmethods__["id"] = _nfqueue.payload_id_get
    if _newclass:id = _swig_property(_nfqueue.payload_id_get, _nfqueue.payload_id_set)
    __swig_setmethods__["qh"] = _nfqueue.payload_qh_set
    __swig_getmethods__["qh"] = _nfqueue.payload_qh_get
    if _newclass:qh = _swig_property(_nfqueue.payload_qh_get, _nfqueue.payload_qh_set)
    __swig_setmethods__["nfad"] = _nfqueue.payload_nfad_set
    __swig_getmethods__["nfad"] = _nfqueue.payload_nfad_get
    if _newclass:nfad = _swig_property(_nfqueue.payload_nfad_get, _nfqueue.payload_nfad_set)
    def get_data(self, *args): return _nfqueue.payload_get_data(self, *args)
    def get_nfmark(self): return _nfqueue.payload_get_nfmark(self)
    def get_indev(self): return _nfqueue.payload_get_indev(self)
    def get_outdev(self): return _nfqueue.payload_get_outdev(self)
    def get_length(self, *args): return _nfqueue.payload_get_length(self, *args)
    def set_verdict(self, *args): return _nfqueue.payload_set_verdict(self, *args)
    def set_verdict_mark(self, *args): return _nfqueue.payload_set_verdict_mark(self, *args)
    def set_verdict_modified(self, *args): return _nfqueue.payload_set_verdict_modified(self, *args)
    def set_verdict_mark_modified(self, *args): return _nfqueue.payload_set_verdict_mark_modified(self, *args)
    def __init__(self): 
        this = _nfqueue.new_payload()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nfqueue.delete_payload
    __del__ = lambda self : None;
payload_swigregister = _nfqueue.payload_swigregister
payload_swigregister(payload)


def nfq_bindings_version():
  return _nfqueue.nfq_bindings_version()
nfq_bindings_version = _nfqueue.nfq_bindings_version
# This file is compatible with both classic and new-style classes.

cvar = _nfqueue.cvar
NF_DROP = cvar.NF_DROP
NF_ACCEPT = cvar.NF_ACCEPT
NF_STOLEN = cvar.NF_STOLEN
NF_QUEUE = cvar.NF_QUEUE
NF_REPEAT = cvar.NF_REPEAT
NF_STOP = cvar.NF_STOP
NF_MAX_VERDICT = cvar.NF_MAX_VERDICT
NFQNL_COPY_NONE = cvar.NFQNL_COPY_NONE
NFQNL_COPY_META = cvar.NFQNL_COPY_META
NFQNL_COPY_PACKET = cvar.NFQNL_COPY_PACKET

